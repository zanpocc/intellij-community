// Copyright 2000-2020 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.

import com.intellij.util.SystemProperties
import org.jetbrains.intellij.build.BuildOptions
import org.jetbrains.intellij.build.IdeaCommunityBuilder
import org.jetbrains.jps.idea.IdeaProjectLoader

// home = 工程路径
String home = IdeaProjectLoader.guessHome(this)


target(compile: "Compile project") {
  try {
    throw new IllegalArgumentException("compile");
    new IdeaCommunityBuilder(home).compileModules()
  }
  catch (Throwable e) {
    e.printStackTrace()
    throw e
  }
}

target('updater-full': 'Build updater-full.jar which includes IDE updater with its dependencies') {
  try {
    throw new IllegalArgumentException("updater-full");
    new IdeaCommunityBuilder(home).buildFullUpdater()
  }
  catch (Throwable e) {
    e.printStackTrace()
    throw e
  }
}

//默认第一个执行这个
target('default': 'The default target') {
  try {
    // 根据环境变量intellij.build.target.os得到目标系统信息
    System.getProperties().put("intellij.build.target.os","mac")
    def options = new BuildOptions()
    // 如果单独构建IDEA社区，我们将无法提供一致的内部版本号，因此请使用*.SNAPSHOT编号以避免混淆
    options.buildNumber = null //we cannot provide consistent build number for IDEA Community if it's built separately so use *.SNAPSHOT number to avoid confusion
    new IdeaCommunityBuilder(home, options).buildDistributions()
  }
  catch (Throwable e) {
    e.printStackTrace()
    throw e
  }
}

target('build-intellij-core' : 'Build intellij-core.zip') {
  try {
    throw new IllegalArgumentException("build-intellij-core");
    def options = new BuildOptions()
    new IdeaCommunityBuilder(home, options).buildIntelliJCore()
  }
  catch (Throwable e) {
    e.printStackTrace()
    throw e
  }
}

target('update-from-sources': 'Update locally installed distribution from compiled classes') {
  try {
    throw new IllegalArgumentException("update-from-sources");
    def options = new BuildOptions()
    options.useCompiledClassesFromProjectOutput = true
    //  options.buildStepsToSkip << BuildOptions.SVGICONS_PREBUILD_STEP
    options.buildStepsToSkip << BuildOptions.SEARCHABLE_OPTIONS_INDEX_STEP
    options.buildStepsToSkip << BuildOptions.SOURCES_ARCHIVE_STEP
    if (!SystemProperties.getBooleanProperty('intellij.build.local.plugins.repository', false)) {
      options.buildStepsToSkip << BuildOptions.PROVIDED_MODULES_LIST_STEP
      options.buildStepsToSkip << BuildOptions.NON_BUNDLED_PLUGINS_STEP
    }
    //when IDEA CE is updated from IDEA UE sources project should be loaded from IDEA UE directory
    String projectHome = isDefined("devIdeaHome") ? devIdeaHome : home
    new IdeaCommunityBuilder(home, options, projectHome).buildUnpackedDistribution("$options.outputRootPath/$distOutputRelativePath")
  }
  catch (Throwable e) {
    e.printStackTrace()
    throw e
  }
}

private boolean isDefined(String key) {
  try {
    this[key]
    return true
  }
  catch (MissingPropertyException ignored) {
    return false
  }
}
